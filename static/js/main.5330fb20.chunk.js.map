{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","App.js","serviceWorker.js","index.js"],"names":["Event","Component","EventList","state","events","className","this","map","event","key","CitySearch","query","suggestions","city","country","localized_country_name","name_string","zip","lat","lon","handleInputChanged","value","target","setState","handleItemClicked","onChange","type","item","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAUeA,G,6KANb,OACF,kC,GAHoBC,cCgBLC,E,4MAfdC,MAAM,CAACC,OAAO,I,uDAEb,OACE,wBAAIC,UAAU,aAEdC,KAAKH,MAAMC,OAAOG,KAAI,SAAAC,GAAK,OACxB,wBAAIC,IAAI,YACN,kBAAC,EAAD,CAAOD,MAAOA,a,GARCP,aCoDTS,E,4MAlDdP,MAAQ,CACPQ,MAAO,SACPC,YAAa,CACf,CACGC,KAAM,SACDC,QAAS,KACTC,uBAAwB,UACxBC,YAAa,kBACbC,IAAK,UACLC,IAAK,MACXC,IAAK,OAGD,CACEN,KAAM,SACNC,QAAS,KACTC,uBAAwB,MACxBZ,MAAO,KACPa,YAAa,4BACbC,IAAK,QACLC,IAAK,MACLC,KAAM,S,EAKXC,mBAAqB,SAACZ,GACvB,IAAMa,EAAQb,EAAMc,OAAOD,MAC3B,EAAKE,SAAS,CAAEZ,MAAOU,K,EAEtBG,kBAAoB,SAACH,GACtB,EAAKE,SAAS,CAAEZ,MAAOU,K,uDAEb,IAAD,OACP,OACJ,yBAAKhB,UAAU,cACb,2BAAOgB,MAAOf,KAAKH,MAAMQ,MACzBc,SAAUnB,KAAKc,mBACbM,KAAK,OACLrB,UAAU,SAEZ,wBAAIA,UAAU,eACbC,KAAKH,MAAMS,YAAYL,KAAI,SAAAoB,GAAI,OAC9B,wBAAIlB,IAAKkB,EAAKX,YAAaY,QAAS,kBAAM,EAAKJ,kBAAkBG,EAAKX,eAAeW,EAAKX,sB,GA7CrEf,aCaV4B,E,uKATX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUJ,aCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5330fb20.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n\trender() {\n\t\treturn (\n<div></div>\n\t\t);\n\t  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\nclass EventList extends Component {\n\tstate={events:[]}\n\trender() {\n\t\treturn (\n\t\t  <ul className=\"EventList\">\n\n\t\t\t{this.state.events.map(event =>\n\t\t\t    <li key=\"event.id\">\n\t\t\t      <Event event={event} />\n\t\t\t    </li>\n\t\t  )}\n\t\t  </ul>\n\t\t);\n\t  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\n\nclass CitySearch extends Component {\n\n\tstate = {\n\t\tquery: 'Munich',\n\t\tsuggestions: [\n{\n\t\t\tcity: 'Munich',\n        country: 'de',\n        localized_country_name: 'Germany',\n        name_string: 'Munich, Germany',\n        zip: 'meetup3',\n        lat: 48.14,\n\t\tlon: 11.58,\n\t\t\n      },\n      {\n        city: 'Munich',\n        country: 'us',\n        localized_country_name: 'USA',\n        state: 'ND',\n        name_string: 'Munich, North Dakota, USA',\n        zip: '58352',\n        lat: 48.66,\n        lon: -98.85\n      }\n\t\t]\n\t  }\n\n\t  handleInputChanged = (event) => {\n\t\tconst value = event.target.value;\n\t\tthis.setState({ query: value });\n\t  } \n\t  handleItemClicked = (value) => {\n\t\tthis.setState({ query: value });\n\t  }\n  render() {\n    return (\n<div className=\"CitySearch\">\n  <input value={this.state.query}\n\t\tonChange={this.handleInputChanged}\n    type=\"text\"\n    className=\"city\"\n  />\n  <ul className=\"suggestions\">\n  {this.state.suggestions.map(item =>\n    <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string)}>{item.name_string}</li>\n  )}\n</ul>\n</div>\n    );\n  }\n}\nexport default CitySearch;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch />\n        <EventList />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}